package pattern

import "fmt"

/*
	Реализовать паттерн «фасад».
	Реализовать паттерн «фасад».
	Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.
		https://en.wikipedia.org/wiki/Facade_pattern
	Проблема:
	Минимизировать зависимость подсистем некоторой сложной системы и обмен информацией между ними.
	Решение:
	Фасад — простой интерфейс для работы со сложным фреймворком. Фасад не имеет всей функциональности фреймворка,
	но зато скрывает его сложность от клиентов.
	В примере рассматривается торговый автомат, который продает напитки в банках.
	Торговый автомат состоит из кнопок выбора напитка PanelButtons, платежной системы PaymentSystem, и
	драйвера электродвигателя ProductDriver, который управляет выдачей товара.
	Плюсами такого подхода является:
	- Упрощение работы клиента с подсистемой - меньше кода, меньше ошибок, быстрее разработка.
	- Уменьшении зависимости от подсистемы - проще внести изменения, проще тестировать.
	- Упрощение внешней документации - упрощение работы с подсистемой для клиента - проще клиентская документация
	Минусами подхода является:
	- Требуется дополнительная реализация необходимых интерфейсов - дополнительная разработка.
	- Нужно хорошо продумать реализуемый набор интерфейсов для клиента, чтобы вся функциональность, ему
	необходимая, была у него доступна (при доработках подсистемы нужно поддерживать и фасад).
	Если необходимой функциональности нет - клиенту придется реализовывать её самому
	(в обход паттерна), а нам затем реализовывать её в рамках паттерна.

*/

// BIOS Объект
type BIOS struct{}

// OperationSystem Объект Операционная система
type OperationSystem struct{}

// Setup Метод запуска (настройки) BIOS
func (bios *BIOS) Setup() {
	fmt.Println("Starting BIOS...")
}

// Setup Метод запуска (настройки) Операционной системы
func (os *OperationSystem) Setup() {
	fmt.Println("Starting Operation system...")
}

// ComputerFacade Объект Фасада, в данном случае - сам компьютер или точнее
//системный блок, на котором будет нажата кнопка запуска (метод Start)
//В нем находятся поля для обоих объектов, методы которых будем обворачивать
type ComputerFacade struct {
	bios *BIOS
	os   *OperationSystem
}

// NewComputerFacade Конструктор без параметров, просто создаем пустые объекты в полях
func NewComputerFacade() *ComputerFacade {
	return &ComputerFacade{os: &OperationSystem{}, bios: &BIOS{}}
}

// Start Основной метод Фасад, представляющий собой нажатие кнопки на системном
//блоке, запускаем BIOS, затем операционную систему - порядок важен!
func (cf *ComputerFacade) Start() {
	cf.bios.Setup()
	cf.os.Setup()
	fmt.Println("Computer is started")
}

func main() {
	cf := NewComputerFacade() //создаем объект Фасада
	cf.Start()                //нажимаем кнопку старт на системном блоке
}
